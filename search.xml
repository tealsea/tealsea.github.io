<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序的对云数据库的增删改查</title>
      <link href="//micrud/"/>
      <url>//micrud/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序的对云数据库的增删改查"><a href="#微信小程序的对云数据库的增删改查" class="headerlink" title="微信小程序的对云数据库的增删改查"></a>微信小程序的对云数据库的增删改查</h1><h2 id="创建数据的类型"><a href="#创建数据的类型" class="headerlink" title="*创建数据的类型"></a>*创建数据的类型</h2><table><thead><tr><th align="center">类型</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Bumber</td><td align="center">字符串类型  ‘a’ ,’b’</td></tr><tr><td align="center">Number</td><td align="center">数值类型  0 1 2 3</td></tr><tr><td align="center">Boolean</td><td align="center">布尔值类型  true || false</td></tr><tr><td align="center">Object</td><td align="center">对象类型 obj:{num:1,name:’哈利波特’}</td></tr><tr><td align="center">Null</td><td align="center">空值</td></tr><tr><td align="center">Array</td><td align="center">数组  list:[‘item1’,’item2]</td></tr><tr><td align="center">Date</td><td align="center">时间类型</td></tr><tr><td align="center">Geopoint</td><td align="center">位置类型</td></tr></tbody></table><h2 id="一、查询数据"><a href="#一、查询数据" class="headerlink" title="一、查询数据"></a>一、查询数据</h2><h4 id="1、云函数查询数据库数据"><a href="#1、云函数查询数据库数据" class="headerlink" title="1、云函数查询数据库数据"></a>1、云函数查询数据库数据</h4><pre><code>// 文件名称为getData    // 云函数入口文件    const cloud=require(&#39;wx-server-sdk&#39;);    // 初始化    cloud.init()    // 连接数据库    const db=cloud.database();    导出数据    exports.main = async (event, context) =&gt;&#123;        // 查询数据库数据并返回        return await db.collection(&#39;数据库名称&#39;).get()    &#125;</code></pre><h4 id="2、本地查询数据库数据"><a href="#2、本地查询数据库数据" class="headerlink" title="2、本地查询数据库数据"></a>2、本地查询数据库数据</h4><pre><code>// 调用云函数数据wx.cloud.callection(&#123;    // 云函数名称    name:&#39;getData&#39;&#125;).then(res=&gt;&#123;    console.log(res)&#125;)-------------------------------------------//本地查询数据库数据    // 连接数据库    const db=wx.cloud.database()    // 查询数据    db.collection(&#39;数据库名称&#39;).get().then(res=&gt;&#123;        console.log(res)    &#125;)</code></pre><h2 id="二、添加数据"><a href="#二、添加数据" class="headerlink" title="二、添加数据"></a>二、添加数据</h2><h4 id="1、云函数添加数据"><a href="#1、云函数添加数据" class="headerlink" title="1、云函数添加数据"></a>1、云函数添加数据</h4><pre><code>// 文件名为 getData// 云函数入口文件const cloud = require(&#39;wx-server-sdk&#39;)// 初始化cloud.init()// 连接数据库const db = cloud.database()// 云函数入口函数exports.main = async (event, context) =&gt; &#123;// 将添加完的数据返回到本地  return await db.collection(&#39;数据库名称&#39;).add(&#123;  // 要创建的数据    data: &#123;     name:&#39;哈利波特&#39;,     age:20,     sex:&#39;男&#39;，     marriage：false    &#125;  &#125;)&#125; </code></pre><h4 id="2、本地添加数据和调用云函数"><a href="#2、本地添加数据和调用云函数" class="headerlink" title="2、本地添加数据和调用云函数"></a>2、本地添加数据和调用云函数</h4><pre><code>// 调用云函数创建的数据 wx.cloud.callFunction(&#123; // 云函数名称 name:&#39;getData&#39; &#125;).then(res=&gt;&#123;     conosle.log(res)   &#125;)--------------------------------------------------------- // 本地向数据库添加用户 // 本地连接数据库    const db=wx.cloud.database();    db.collection(&#39;数据库名称&#39;).add(&#123;        // 要创建的数据        data: &#123;         name:&#39;哈利波特&#39;,         age:20,         sex:&#39;男&#39;，         marriage：false        &#125;    &#125;).then(res=&gt;&#123;        console.log(res)    &#125;)</code></pre><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>​    在云函数中添加数据是没有用户的openid的,在本地创建的数据自带用户openid</p><h2 id="三、删除数据"><a href="#三、删除数据" class="headerlink" title="三、删除数据"></a>三、删除数据</h2><h4 id="1、云函数删除数据库数据"><a href="#1、云函数删除数据库数据" class="headerlink" title="1、云函数删除数据库数据"></a>1、云函数删除数据库数据</h4><pre><code>// 文件名为delDataconst cloud=require(wx-server-sdk);//初始化cloud.init();const db=cloud.database();exports.main= async (event,context)=&gt;&#123;    // 删除数据库数据并返回    return await db.collection(&#39;数据库名字&#39;).doc(&#39;要删除数据的id&#39;).remove()&#125;</code></pre><h4 id="2、-本地删除数据库数据和调用云函数"><a href="#2、-本地删除数据库数据和调用云函数" class="headerlink" title="2、 本地删除数据库数据和调用云函数"></a>2、 本地删除数据库数据和调用云函数</h4><pre><code>// 调用云函数删除数据wx.cloud.callFuction(&#123;    // 要删除的问函数名称    name:&#39;delData&#39;&#125;).then(res=&gt;&#123;    console.log(res)&#125;)-----------------------------------------------------// 本地删除数据库数据、    //连接数据库    const db=wx.cloud.database();    db.collection(&#39;text&#39;).doc(&#39;要删除的数据id&#39;).remove().then(res=&gt;&#123;        console.log(res)    &#125;)</code></pre><h6 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h6><p>本地删除操作默认只能删除自己在本地创建的数据，不能删除云开发控制台和云函数中常见的数据，如：需求是在本地删除数据，请在云控制台中的数据库修改权限</p><h2 id="四、修改数据"><a href="#四、修改数据" class="headerlink" title="四、修改数据"></a>四、修改数据</h2><h4 id="1、-云函数中修改数据"><a href="#1、-云函数中修改数据" class="headerlink" title="1、 云函数中修改数据"></a>1、 云函数中修改数据</h4><pre><code>// 文件名为updateDataconst cloud=require(&#39;wx-server-sdk&#39;);cloud.init()const db=cloud.database()exports.main= async (event, context) =&gt; &#123;    // 修改部分数据并返回    return await db.collection(&#39;数据库名称&#39;).doc(&#39;要修改的数据id&#39;).update(&#123;    // 要修改的值        data:&#123;            name:&#39;赫敏&#39;，            age:30        &#125;    &#125;)&#125;</code></pre><h4 id="2、本地修改数据库数据和调用云函数"><a href="#2、本地修改数据库数据和调用云函数" class="headerlink" title="2、本地修改数据库数据和调用云函数"></a>2、本地修改数据库数据和调用云函数</h4><pre><code>// 调用云函数wx.cloud.callection(&#123;    name:&#39;updateData&#39;&#125;).then(res=&gt;&#123;    console.log(res)&#125;)--------------------------------------------// 本地修改数据库数据const db=wx.cloud.database();db.collection(&#39;数据库名称&#39;).doc(&#39;要修改的数据id&#39;).update(&#123;    // 要修改的数据    data:&#123;        name:&#39;卢娜&#39;，        age:30    &#125;&#125;).then(res=&gt;&#123;    console.log(res)&#125;)</code></pre><h6 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h6><p>  本地调用和云函数的区别只在于</p><ul><li>云函数权限大</li><li>本地操作要在代码前要添加wx.什么什么</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node将明文密码加密</title>
      <link href="//nobcrypt/"/>
      <url>//nobcrypt/</url>
      
        <content type="html"><![CDATA[<h3 id="今天给大家介绍一款Node密码加密的模块-bcrypt"><a href="#今天给大家介绍一款Node密码加密的模块-bcrypt" class="headerlink" title="今天给大家介绍一款Node密码加密的模块 bcrypt"></a>今天给大家介绍一款Node密码加密的模块 bcrypt</h3><ol><li><h5 id="使用bcrypt模块加密前确保本机存在python环境"><a href="#使用bcrypt模块加密前确保本机存在python环境" class="headerlink" title="使用bcrypt模块加密前确保本机存在python环境"></a>使用bcrypt模块加密前确保本机存在python环境</h5><p><a href="https://www.python.org/">python官网</a></p></li><li><h5 id="下载bacrypt模块"><a href="#下载bacrypt模块" class="headerlink" title="下载bacrypt模块"></a>下载bacrypt模块</h5><pre><code>npm install bcrypt</code></pre></li><li><h5 id="在本地项目中导入bcrypt模块"><a href="#在本地项目中导入bcrypt模块" class="headerlink" title="在本地项目中导入bcrypt模块"></a>在本地项目中导入bcrypt模块</h5><pre><code>const bcrypt = require(&#39;bcrypt&#39;)</code></pre></li><li><h5 id="生成盐-（理论下值于高，越不容易被破解）"><a href="#生成盐-（理论下值于高，越不容易被破解）" class="headerlink" title="生成盐  （理论下值于高，越不容易被破解）"></a>生成盐  （理论下值于高，越不容易被破解）</h5><pre><code>const salt = await bcrypt.genSalt(10) /*  * 注意:  *      1、生成的盐是异步操作  *      2、数值表示加密的强度 0-10  */ </code></pre></li><li><h5 id="将密码进行加密处理"><a href="#将密码进行加密处理" class="headerlink" title="将密码进行加密处理"></a>将密码进行加密处理</h5><pre><code>const newPass=await bcrypt.hash(pass,salt)/* * 注意 *   1、 加密密码是异步操作 *   2、salt是第四步生生成的盐，pass是要加密的值，newPass是加密后的新密码 */</code></pre></li><li><h5 id="验证密码是否加密成功"><a href="#验证密码是否加密成功" class="headerlink" title="验证密码是否加密成功"></a>验证密码是否加密成功</h5><pre><code>const isOk= await bcrypt.compare(newPass,pass)console.log(isok) // false || true/* * 注意: *   1、验证密码是异步操作 *   2、新密码与旧密码比对，如果成功返回true,失败返回false */</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> bcrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript关于数组方法</title>
      <link href="//jsarray/"/>
      <url>//jsarray/</url>
      
        <content type="html"><![CDATA[<h3 id="Array-forEach-v-i-callback"><a href="#Array-forEach-v-i-callback" class="headerlink" title="Array.forEach(v,i,callback)"></a>Array.forEach(v,i,callback)</h3><ol><li>作用 :循环数组</li><li>形参：</li></ol><ul><li><p>v : 当前循环项</p></li><li><p>i :  当前循环项索引</p></li><li><p>callback: 回调函数</p></li></ul><pre><code>const array = [    &#123;    id:0,    name:&#39;孙为空&#39;    &#125;,    &#123;    id:1,    name:&#39;猪八戒&#39;    &#125;,    &#123;    id:2,    name:&#39;沙悟净&#39;    &#125;,    &#123;    id:3,    name:&#39;唐三藏&#39;    &#125;]array.forEach((v,i)=&gt;&#123;    consoel.log(v,i)&#125;)// 输出:&#123;id:0,name:&#39;孙悟空&#39;&#125;,&#123;id:1,name:&#39;猪八戒&#39;&#125;,&#123;id:2,name:&#39;沙悟净&#39;&#125;,&#123;id:3,name:&#39;唐三藏&#39;&#125;</code></pre><h3 id="Array-filter-v-i-callback"><a href="#Array-filter-v-i-callback" class="headerlink" title="Array.filter(v,i,callback)"></a>Array.filter(v,i,callback)</h3><ol><li>作用 : 过滤数组,并返回新数组</li><li>形参：</li></ol><ul><li>v : 当前循环项</li><li>i :  当前循环项索引</li><li>callback: 回调函数</li></ul><pre><code>const num = [10,15,20,25]const newNum = num.filter((v,i)=&gt;&#123;    return v &gt;= 15&#125;)console.log(newNum)//输出:    [15, 20, 25]</code></pre><h3 id="Array-map-v-i-callback"><a href="#Array-map-v-i-callback" class="headerlink" title="Array.map(v,i,callback)"></a>Array.map(v,i,callback)</h3><ol><li>作用 : 返回数组中指定的值</li><li>形参：*同上</li></ol><pre><code>const list = [    &#123;     name:&#39;张三&#39;,     age:20    &#125;,    &#123;     name:&#39;李四&#39;,     age:25    &#125;,    &#123;     name:&#39;王五&#39;,     age:27    &#125;]const newList = list.map((v,i)=&gt;&#123;    return v.name&#125;)console.log(newList)// 输出:    [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]</code></pre><h3 id="Array-findIndex-v-i-callback"><a href="#Array-findIndex-v-i-callback" class="headerlink" title="Array.findIndex(v,i,callback)"></a>Array.findIndex(v,i,callback)</h3><ol><li>作用 : 返回符合条件的索引 </li><li>形参：*同上</li><li>注意：如果找到符合条件的值，立即结束循环并返回索引</li><li>索引：索引是从0开始计算的</li></ol><pre><code>const num = [10,20,30,40]const index = num.findIndex((v,i)=&gt;&#123;    return v &gt; 25&#125;)console.log(index)// 输出:    2</code></pre><h3 id="Array-every-v-i-callback"><a href="#Array-every-v-i-callback" class="headerlink" title="Array.every(v,i,callback)"></a>Array.every(v,i,callback)</h3><ol><li>作用 : 判断数组中的值符合条件，并返回布尔值 false || true</li><li>形参：*同上</li><li>注意：数组中只要有一个不符合条件，都会返回false,并立即结束循环</li></ol><pre><code>const num = [20,30,40,50]const bool = num.every((v,i)=&gt;&#123;    console.log(v)    return v &lt;= 30&#125;)console.log(bool)// 输出:    20    30    40    false</code></pre><h3 id="Array-some-v-i-callback"><a href="#Array-some-v-i-callback" class="headerlink" title="Array.some(v,i,callback)"></a>Array.some(v,i,callback)</h3><ol><li>作用 : 判断数组中的值符合条件，并返回布尔值 false || true</li><li>形参：*同上</li><li>注意：数组中只要有一个符合条件，都会返回true,并立即结束循环</li></ol><pre><code>const num = [10,20,30,40]const bool=num.some((v,i)=&gt;&#123;    console.log(v)    return v&gt;=30&#125;)console.log(bool)// 输出:    10    20    30    true</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb数据加密</title>
      <link href="//modb/"/>
      <url>//modb/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>打开终端</strong> （如：cmd || powershell 等等…）</p></li><li><p>输入  <strong>mongo</strong></p></li><li><p><strong>show dbs</strong>   //查询数据列表</p></li><li><p><strong>use admin</strong>  //切换至admin数据库</p></li><li><p><strong>db.createUser({user:’用户名’，pwd:’设置管理员密码’，roles:[‘root’]})</strong>  //创建超级管理员</p><ol><li><p>role: 管理权限</p></li><li><p>参数：</p><ul><li><p>root:超级管理员权限，可对任意数据库进行增删改查</p></li><li><p>read能读取该数据库的内容，但不能进心修改</p></li><li><p>readwrite:   可以对该数据库进行增删改查</p></li></ul></li></ol></li><li><p><strong>use text</strong>   //创建并进入text数据库</p></li><li><p><strong>db.createUser({user:’用户名‘，pwd:’密码’，roles:[‘readWhite’]})</strong>        //创建普通管理员</p><pre><code>// 创建代码    db.createUser(&#123;user:&#39;text&#39;,pwd:&#39;teal&#39;,roles:[&#39;readWrite&#39;]&#125;)// 成功提示    Successfully added user: &#123; &quot;user&quot; : &quot;text&quot;, &quot;roles&quot; : [ &quot;readWrite&quot; ] &#125;</code></pre></li><li><p><strong>edit</strong>  //退出</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="//text/"/>
      <url>//text/</url>
      
        <content type="html"><![CDATA[<h1 id="我是测试文章请勿评论"><a href="#我是测试文章请勿评论" class="headerlink" title="我是测试文章请勿评论"></a>我是测试文章请勿评论</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
